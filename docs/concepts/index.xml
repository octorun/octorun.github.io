<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concepts on</title><link>https://octorun.github.io/docs/concepts/</link><description>Recent content in Concepts on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 23 Mar 2022 20:38:43 +0700</lastBuildDate><atom:link href="https://octorun.github.io/docs/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Architecture</title><link>https://octorun.github.io/docs/concepts/architecture/</link><pubDate>Sun, 27 Mar 2022 20:19:48 +0700</pubDate><guid>https://octorun.github.io/docs/concepts/architecture/</guid><description>Overview #
Octorun is a Kubernetes native application means Octorun specifically designed to run on Kubernetes by extending the Kubernetes API using Custom Resources and Custom Controllers lately known as Operator Pattern.
Components #
Custom Resource Definitions (CRDs) #
A CustomResourceDefinition is a built-in resource that lets you extend the Kubernetes API. Octorun provides and relies on several CustomResourceDefinitions:
Runner: represents a single Github self-hosted runner. It holds several fields for Github self-hosted runner creation as well as Pod specification.</description></item><item><title>Runner</title><link>https://octorun.github.io/docs/concepts/runner/</link><pubDate>Tue, 29 Mar 2022 00:08:41 +0700</pubDate><guid>https://octorun.github.io/docs/concepts/runner/</guid><description>Overview #
Runner is a namespaced resource in octorun that represents a single Github self-hosted runner. It is designed to be ephemeral just like a Kubernetes Jobs. Once the owned Pod is complete e.g. has finished executing Github Workflow Job, the Runner will also mark it as complete. That is to ensure each Github Workflow Job is always run in a clean environment.
Runner&amp;rsquo;s lifecycle itself relies on Owned Kubernetes Pod and Status from Github.</description></item><item><title>Runnerset</title><link>https://octorun.github.io/docs/concepts/runnerset/</link><pubDate>Tue, 29 Mar 2022 00:08:44 +0700</pubDate><guid>https://octorun.github.io/docs/concepts/runnerset/</guid><description>Overview #
A RunnerSet purpose is to maintain a set of Runners running at any given time. It is used to guarantee the availability of a specified number of identical Runners.
Controller #
The RunnerSet controller has main responsibilities to:
Creating a Runner when actual owned runners is less than desired runners. Deleting a Runner when actual owned runners is more than desired runners. Deleting a Runner when its status phase is Complete Adopting unowned Runners that arenâ€™t assigned to a RunnerSet Reconciliation Flow #
stateDiagram-v2
state enqueue &amp;lt;&amp;lt;choice&amp;gt;&amp;gt;
state runner_has_no_owner &amp;lt;&amp;lt;choice&amp;gt;&amp;gt;
state runner_has_complete_phase &amp;lt;&amp;lt;choice&amp;gt;&amp;gt;
state runners_start_loop &amp;lt;&amp;lt;choice&amp;gt;&amp;gt;
state runners_end_loop &amp;lt;&amp;lt;choice&amp;gt;&amp;gt;
state too_few_runners &amp;lt;&amp;lt;choice&amp;gt;&amp;gt;
state too_many_runners &amp;lt;&amp;lt;choice&amp;gt;&amp;gt;
state has_reconcile_error &amp;lt;&amp;lt;choice&amp;gt;&amp;gt;
[*] --&amp;gt; RunnerSetController
RunnerSetController --&amp;gt; enqueue
enqueue --&amp;gt; EnqueuesReconcileRequest
EnqueuesReconcileRequest --&amp;gt; ListRunnersBySelector
ListRunnersBySelector --&amp;gt; runners_start_loop
runners_start_loop --&amp;gt; runner_has_no_owner : Runner Has No Owner?</description></item></channel></rss>